// DataChannelProcessesManager.h
#ifndef DATACHANNELPROCESSESMANAGER_H
#define DATACHANNELPROCESSESMANAGER_H

#include <vector>
#include <memory>
#include "GeneralProcessor.h"
#include "DataBuffer.h"

/**
 * @brief Manages data channel processors and their execution.
 *
 * The `DataChannelProcessesManager` class is responsible for managing a collection of
 * data channel processors and coordinating their execution. It also maintains a data buffer
 * to store the output generated by the processors.
 */
class DataChannelProcessesManager {
public:
    /**
     * @brief Constructor for DataChannelProcessesManager.
     * @param bufferSize The size of the data buffer (default is 10).
     * @param verbose Verbosity level for logging (default is 0).
     */
    DataChannelProcessesManager(size_t bufferSize = 10, int verbose = 0);

    /**
     * @brief Adds a data channel processor to the manager.
     * @param processor Pointer to the GeneralProcessor to add.
     * @details This is automatically done based on the config.
     * @see DataChannelManager::addChannel
     */
    void addProcessor(GeneralProcessor* processor);

    /**
     * @brief Runs all registered processors and adds their output to the data buffer.
     * @return True if successful, false otherwise.
     */
    bool runProcesses();

    /**
     * @brief Gets the data buffer.
     * @return Reference to the data buffer.
     */
    const DataBuffer<std::string>& getDataBuffer() const;

    /**
     * @brief Updates the greatest common divisor (GCD) of processor periods.
     * @details Used to find the a psuedo-optimal sleep time between publishes.
     */
    void updateProcessorPeriodsGCD();

    /**
     * @brief Gets the value of the greatest common divisor (GCD) of processor periods.
     * @return The GCD of processor periods.
     */
    int getProcessorPeriodsGCD() const;

private:
    std::vector<GeneralProcessor*> processors; ///< Collection of data channel processors.
    DataBuffer<std::string> dataBuffer; ///< Data buffer to store processor output.
    int verbose; ///< Verbosity level for printout and logging.
    int processorPeriodsGcd; ///< Greatest common divisor (GCD) of processor periods.

    /**
     * @brief Finds the greatest common divisor (GCD) of processor periods.
     * @return The GCD of processor periods.
     */
    int findGCDOfProcessorPeriods();
};

#endif // DATACHANNELPROCESSESMANAGER_H
